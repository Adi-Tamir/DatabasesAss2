Drop Table if exists OFFICIALEMPLOYEE;
Drop Table if exists CONSTRUCTOREMPLOYEE;
Drop Table if exists EMPLOYEE;
Drop Table if exists CellPhone;
DROP TABLE if exists Department;
DROP TABLE if exists ProjectConstructorEmployee;
DROP TABLE if exists Project;
DROP TABLE if exists Neighborhood;
DROP TABLE if exists ParkingArea;
DROP TABLE if exists CarParking;
DROP TABLE if exists Cars;
DROP TABLE if exists GarbageCollection;
DROP TABLE if exists GarbageCollectionCompany;
DROP TABLE if exists  TrashCan;
DROP TABLE if exists  Apartment;
DROP TABLE if exists  Apartment;
DROP TABLE if exists Resident;

Create Table if not exists EMPLOYEE(
EID INTEGER PRIMARY KEY, 
Birthdate datetime,
FirstName TEXT not NULL,
LastName TEXT not NULL,
City Text not null,
StreetName Text not null,
Number INTEGER not null,
Door Integer not null

);

CREATE TABLE IF NOT EXISTS OFFICIALEMPLOYEE(
EID Integer PRIMARY KEY REFERENCES EMPLOYEE(EID) on DELETE CASCADE,
Degree TEXT not NULL,
StartWorkingDate datetime not NULL,
Department INTEGER,
Foreign Key(Department) REFERENCES Department(DID) on DELETE Cascade on UPDATE CASCADE
);

CREATE TABLE IF NOT EXISTS CONSTRUCTOREMPLOYEE(
EID INTEGER Primary Key References EMPLOYEE(EID) on DELETE CASCADE,
SalaryPerDay INTEGER not NULL,
CompanyName Text not Null
);

CREATE Table if not exists CellPhone(
Number TEXT,
EID INTEGER,
FOREIGN KEY(EID) REFERENCES EMPLOYEE(EID) on Delete Cascade,
CONSTRAINT prime PRIMARY KEY(Number,EID)
);

CREATE Table if not exists Department (
DID Integer Primary Key AUTOINCREMENT,
Name Text not null,
Description Text,
ManagerID INTEGER,
Foreign Key(ManagerID) References OFFICIALEMPLOYEE(EID) on DELETE RESTRICT on update CASCADE
);

Create Table if not exists ProjectConstructorEmployee(
EID Integer REFERENCES CONSTRUCTOREMPLOYEE(EID) on delete Restrict on update CASCADE,
PID Integer References Project(PID) on DELETE CASCADE on UPDATE CASCADE,
StartWorkingDate datetime not null,
EndWorkingDate datetime not null,
JobDescription Text,
CONSTRAINT dseTest CHECK (StartWorkingDate<=EndWorkingDate),
Primary Key(EID, PID)
);

Create Table if not exists Project(
PID Integer Primary Key AUTOINCREMENT,
Name Text not NULL,
Description Text,
Budget Integer not null,
NID Integer,
Foreign key (NID) REFERENCES Neighborhood(NID) on Delete Restrict on update Restrict
);

Create Table if not exists Neighborhood(
NID Integer Primary key AUTOINCREMENT,
Name Text not null
);

CREATE Table if not exists ParkingArea(
AID Integer Primary key AUTOINCREMENT,
MaxPricePerDay Integer not null,
PricePerHour Integer not null 
CONSTRAINT priceSanity check(MaxPricePerDay > PricePerHour),
Name Text,
NID Integer,
Foreign key (NID) REFERENCES Neighborhood(NID) on DELETE CASCADE on update CASCADE
);

CREATE Table if not exists CarParking(
StartTime datetime,
EndTime datetime CONSTRAINT sanity check (Endtime >= StartTime),
cost integer not null,
CID Integer,
AID Integer,
FOREIGN key (CID) REFERENCES Cars(CID) on DELETE CASCADE on update CASCADE,
Foreign key (AID) REFERENCES ParkingArea(AID) on DELETE set null on UPDATE CASCADE,
CONSTRAINT name PRIMARY key  (CID, StartTime)
);

Create Table if not exists Cars(
CID Integer primary key AUTOINCREMENT,
CellPhoneNumber Text,
CreditCard TEXT,
ExpirationDate date,
ThreeDigits Varchar(3),
ID Varchar(9)
);

Create Table if not exists GarbageCollection(
StartTime datetime,
Endtime datetime CONSTRAINT sanity check (Endtime >= StartTime),
GCID Integer,
TCID Integer,
Foreign key (GCID) REFERENCES GarbageCollectionCompany(GCID) on DELETE CASCADE on update cascade,
FOREIGN key (TCID) REFERENCES TrashCan(TCID) on delete Cascade on update CASCADE,
CONSTRAINT name PRIMARY key(GCID, TCID, StartTime)
);

CREATE TABLE if not exists GarbageCollectionCompany(
GCID Integer primary key AUTOINCREMENT,
Name Text not NULL
);

Create Table if not exists TrashCan(
TCID INTEGER PRIMARY key AUTOINCREMENT,
NID Integer,
Foreign key (NID) References Neighborhood(NID) on delete RESTRICT on update CASCADE
);

Create table if not exists Apartment(
StreetName Text not null,
Number Integer not null,
Door INTEGER,
Type TEXT,
SizeSquareMeter Integer not null CONSTRAINT size check (SizeSquareMeter>0),
NID INTEGER,
FOREIGN key (NID) REFERENCES Neighborhood(NID) on Delete RESTRICT on update Restrict,
CONSTRAINT name PRIMARY key(StreetName, Number, Door)
);

Create table if not exists Resident(
RID Integer PRIMARY KEY AUTOINCREMENT,
FirstName Text not null,
LastName Text not null,
Birthdate date not null,
StreetName Text not null,
Number INTEGER ,
Door Integer,
FOREIGN key(StreetName) REFERENCES Apartment(StreetName) on DELETE restrict on update cascade,
FOREIGN key(Number) REFERENCES Apartment(Number) on DELETE restrict on update cascade,
FOREIGN key (Door) REFERENCES Apartment (Door) on DELETE restrict on update cascade
);